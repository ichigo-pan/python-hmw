import tkinter as tk
from tkinter import ttk


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–∫–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
def is_triangle(a, b, c):
    if (a + b > c) and (a + c > b) and (b + c > a):
        return a + b + c
    else:
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .0
def zero_after_point(x):
    if x == int(x):
        return int(x)
    else:
        return x

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –æ–∫–Ω–∞
window = tk.Tk()
window.minsize(450, 350)
window.maxsize(600, 550)
window.title("–ó–∞–¥–∞–Ω–∏–µ 1")
frame_1 = ttk.Frame(window)
frame_1.pack(expand=True, fill="both")

# –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
a_text_var = tk.StringVar()
b_text_var = tk.StringVar()
c_text_var = tk.StringVar()
result_var = tk.StringVar()


def btn_pressed():
# –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–≤–æ–¥–∏–º –∏—Ö –≤ –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
        a = float(a_text_var.get())
        b = float(b_text_var.get())
        c = float(c_text_var.get())
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞. –í —Å–ª—É—á–∞–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–∏–º–µ—Ç—Ä
        perimetr_float = is_triangle(a, b, c)
        
        if perimetr_float is not False:
            down_label.configure(text="–ü–µ—Ä–∏–º–µ—Ç—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Ä–∞–≤–µ–Ω: ")
            answ_label.place(relx=0.5, rely=0.7, anchor="center")
            perimetr_final = zero_after_point(perimetr_float)
            result_var.set(perimetr_final)
        else:
            down_label.configure(text="–¢–∞–∫–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç.")
            answ_label.place_forget()

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ, –∞ —Å—Ç—Ä–æ–∫—É —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
    except ValueError:
        down_label.configure(text="–í–º–µ—Å—Ç–æ —á–∏—Å–µ–ª –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.")
        answ_label.place_forget()
        

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—Ä–∞–∑—É, –≤ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–Ω–µ –±—É–¥—É—Ç —Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–æ–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Column:
    def __init__(self, user_input, x_position, var):
        self.label = ttk.Label(frame_1, text=user_input)
        self.entry = ttk.Entry(frame_1, width=15, textvariable=var)
        self.position(x_position)

    def position(self, x_position):
        self.label.place(relx=x_position, rely=0.2, anchor="center")
        self.entry.place(relx=x_position, rely=0.3, anchor="center")


# –ù–∞–¥–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É
label_task = ttk.Label(frame_1, text="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—ã –ê, –í, –° —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞: ")
label_task.place(relx=0.5, rely=0.1, anchor="center")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∏
column1 = Column(user_input="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ê:", x_position=0.2, var=a_text_var)
column2 = Column(user_input="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ B:", x_position=0.5, var=b_text_var)
column3 = Column(user_input="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ C:", x_position=0.8, var=c_text_var)


# –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–¥–∞—ë—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
subm_btn = ttk.Button(frame_1, text="–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å", command=btn_pressed)
subm_btn.place(relx=0.5, rely=0.5, anchor="center")


# –¢–µ–∫—Å—Ç, –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥—ë—Ç –≤–º–µ—Å—Ç–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª —á—Ç–æ-–ª–∏–±–æ –¥—Ä—É–≥–æ–µ, –∏–ª–∏ –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –≥–µ–æ–º–µ—Ç—Ä–∏–∏
down_label = ttk.Label(frame_1, text="–ü–µ—Ä–∏–º–µ—Ç—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Ä–∞–≤–µ–Ω: ")
down_label.place(relx=0.5, rely=0.6, anchor="center")


# –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—Å–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±—ã–ª–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω—ã
answ_label = ttk.Label(frame_1, text="0", textvariable=result_var)
answ_label.place(relx=0.5, rely=0.7, anchor="center")

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
window.mainloop()


'''
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨úüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨õüü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õ‚¨õüü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨õüü®üü®üü®üü®üüßüüß‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õüüßüüßüüßüüßüüß‚¨õ‚¨õüü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ
‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
'''


import tkinter as tk
from tkinter import ttk
from collections import Counter
from math import sqrt
import matplotlib.pyplot as plt


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–∫–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
def is_triangle(a, b, c):
    if (a + b > c) and (a + c > b) and (b + c > a):
        return a + b + c
    else:
        return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .0
def zero_after_point(x):
    if x == int(x):
        return int(x)
    else:
        return x


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –æ–∫–Ω–∞
window = tk.Tk()
window.minsize(500, 400)
window.title("–ó–∞–¥–∞–Ω–∏–µ 2")
frame_1 = ttk.Frame(window)
frame_1.pack(expand=True, fill="both")


# –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
a_x_var = tk.StringVar()
a_y_var = tk.StringVar()
b_x_var = tk.StringVar()
b_y_var = tk.StringVar()
c_x_var = tk.StringVar()
c_y_var = tk.StringVar()
d_text_var = tk.StringVar()



def btn_pressed():
    try:
        # –°–æ–∑–¥–∞—ë–º –¥–≤–∞ –ø—É—Å—Ç—ã—Ö –ª–∏—Å—Ç–∞, —á—Ç–æ–±—ã –≤ –Ω–∏—Ö –ø–æ–ª–æ–∂–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        final_x = []
        final_y = []
        # –ü–∞–∫—É–µ–º –≤ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
        x_axis_num = [float(a_x_var.get()), float(b_x_var.get()), float(c_x_var.get())]
        y_axis_num = [float(a_y_var.get()), float(b_y_var.get()), float(c_y_var.get())]

        # –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ —á–µ–º 2
        x_list = Counter(x_axis_num)
        y_list = Counter(y_axis_num)
        x_axis_dupl = [item for item in x_list if x_list[item] > 2]
        y_axis_dupl = [item for item in y_list if y_list[item] > 2]

        # –ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç—Ä—ë—Ö –∏ –±–æ–ª–µ–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç 
        if len(x_axis_dupl) > 0 or len(y_axis_dupl) > 0:
            label_d.configure(text="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Ç–∞–∫–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç.")
            label_d_points.pack_forget()
        
        else:  
            # –ï—Å–ª–∏ —Å—Ö–æ–∂–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö         
            label_d.configure(text="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ D:")
            label_d_points.pack()
            
            # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–ª–∏–Ω –æ—Ç—Ä–µ–∑–∫–æ–≤ AB, AC, BC, –≤—ã—è—Å–Ω–µ–Ω–∏–µ —á—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞, –∞ —á—Ç–æ –∫–∞—Ç–µ—Ç—ã
            vector_1 = sqrt(
                (x_axis_num[1] - x_axis_num[0]) ** 2
                + (y_axis_num[1] - y_axis_num[0]) ** 2
            )
            vector_2 = sqrt(
                (x_axis_num[2] - x_axis_num[0]) ** 2
                + (y_axis_num[2] - y_axis_num[0]) ** 2
            )
            vector_3 = sqrt(
                (x_axis_num[2] - x_axis_num[1]) ** 2
                + (y_axis_num[2] - y_axis_num[1]) ** 2
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ —ç—Ç–æ–º –∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –æ–∫–∞–∂–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–∑–∫–æ–º)
            if is_triangle(vector_1, vector_2, vector_3):
                
                # –í—ã—á–∏—Å–ª—è–µ–º —á—Ç–æ –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ - –≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞
                hypotenuse = max(vector_1, vector_2, vector_3)

                if hypotenuse == vector_1:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ª–∏—Å—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏, –Ω–µ –≤—Ö–æ–¥—è—â–µ–π –≤ –≥–∏–ø–æ—Ç–µ–Ω—É–∑—É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã
                    sort_list = [x_axis_num[0], x_axis_num[2], x_axis_num[1]]
                    x_axis_num = sort_list
                    sort_list = [y_axis_num[0], y_axis_num[2], y_axis_num[1]]
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Ä–µ–¥–∏–Ω—ã –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã –∏ —á–µ—Ç–≤—ë—Ä—Ç—É—é —Ç–æ—á–∫—É
                    half_hypotenuse = [
                        (x_axis_num[0] + x_axis_num[2]) / 2,
                        (y_axis_num[0] + y_axis_num[2]) / 2,
                    ]
                    # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    d_var = [
                        (half_hypotenuse[0] * 2 - x_axis_num[1]),
                        (half_hypotenuse[1] * 2 - y_axis_num[1]),
                    ]

                elif hypotenuse == vector_2:
                    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –ª–∏—Å—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–º
                    half_hypotenuse = [
                        (x_axis_num[0] + x_axis_num[2]) / 2,
                        (y_axis_num[0] + y_axis_num[2]) / 2,
                    ]
                    # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    d_var = [
                        (half_hypotenuse[0] * 2 - x_axis_num[1]),
                        (half_hypotenuse[1] * 2 - y_axis_num[1]),
                    ]

                else:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ª–∏—Å—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏, –Ω–µ –≤—Ö–æ–¥—è—â–µ–π –≤ –≥–∏–ø–æ—Ç–µ–Ω—É–∑—É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã
                    sort_list = [x_axis_num[1], x_axis_num[0], x_axis_num[2]]
                    x_axis_num = sort_list
                    sort_list = [y_axis_num[1], y_axis_num[0], y_axis_num[2]]

                    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Ä–µ–¥–∏–Ω—ã –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã –∏ —á–µ—Ç–≤—ë—Ä—Ç—É—é —Ç–æ—á–∫—É
                    half_hypotenuse = [
                        (x_axis_num[0] + x_axis_num[2]) / 2,
                        (y_axis_num[0] + y_axis_num[2]) / 2,
                    ]
                    # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    d_var = [
                        (half_hypotenuse[0] * 2 - x_axis_num[1]),
                        (half_hypotenuse[1] * 2 - y_axis_num[1]),
                    ]

                # –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ç–≤—ë—Ä—Ç—É—é —Ç–æ—á–∫—É –≤ –ª–∏—Å—Ç—ã —Ö –∏ —É, –∏ –µ—â—ë —Ä–∞–∑ –ø–µ—Ä–≤—É—é, —á—Ç–æ–±—ã –Ω–∞—á–µ—Ä—Ç–∏—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                x_axis_num.append(d_var[0])
                y_axis_num.append(d_var[1])
                x_axis_num.append(x_axis_num[0])
                y_axis_num.append(y_axis_num[0])

                # –û–±—Ä—É–±–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ .0, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å –∏ –≤–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏—Ç–æ–≥–æ–≤—ã–π –ª–∏—Å—Ç
                for i in x_axis_num:
                    final_x.append(zero_after_point(i))
                for j in y_axis_num:
                    final_y.append(zero_after_point(j))

                
                # –ß—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –≤—ã–≤–µ—Å—Ç–∏ —á–µ—Ç–≤—ë—Ä—Ç—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (–±—É–∫–≤—ã –≤—ã–±—Ä–∞–Ω—ã —Å–ª—É—á–∞–π–Ω–æ, –º–æ–≥—É—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é)
                # A = [final_x[0], final_y[0]]
                # B = [final_x[1], final_y[1]]
                # C = [final_x[2], final_y[2]]
                D = [final_x[3], final_y[3]]
                d_text_var.set(f'{D[0]}.{D[1]}')            
            

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ —ç—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∏
                plt.close(fig="all")
                # –°–æ–∑–¥–∞—ë–º —Ñ–∏–≥—É—Ä—É
                plt.figure(num="rectangle", dpi=100)

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                plt.grid(visible=True, linewidth=1, which="both")
                plt.title(label="–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫", fontsize=14)

                plt.xlabel(xlabel="–û—Å—å X", loc="center")
                plt.ylabel(ylabel="–û—Å—å Y", loc="center")

                # –í—ã–≤–æ–¥–∏–º
                plt.plot(final_x, final_y)
                plt.show()

            else:
                # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
                label_d.configure(text="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Ç–∞–∫–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç.")
                label_d_points.pack_forget()
        

    except ValueError:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á—Ç–æ-—Ç–æ –≤–º–µ—Å—Ç–æ —á–∏—Å–µ–ª
        label_d.configure(text="–í–º–µ—Å—Ç–æ —á–∏—Å–µ–ª –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.")
        label_d_points.pack_forget()



# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—Ä–∞–∑—É, –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±—É–¥—É—Ç —Ç–µ–∫—Å—Ç –∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Row:
    def __init__(self, user_input, y_position, var_x, var_y):
        self.label = ttk.Label(frame_1, text=user_input)
        self.entry_x = ttk.Entry(frame_1, textvariable=var_x)
        self.entry_y = ttk.Entry(frame_1, textvariable=var_y)
        self.position(y_position)

    def position(self, y_position):
        self.label.place(relx=0.3, rely=y_position, anchor="center")
        self.entry_x.place(relx=0.4, rely=y_position, anchor="center", relwidth=0.1)
        self.entry_y.place(relx=0.5, rely=y_position, anchor="w", relwidth=0.1)


# –ù–∞–¥–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É
label_task = ttk.Label(
    frame_1, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ –ê, –í, –° –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: "
)
label_task.place(relx=0.5, rely=0.1, anchor="center")


# –ù–∞–¥–ø–∏—Å–∏ —Ö –∏ —É –Ω–∞–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
label_x = ttk.Label(frame_1, text="x")
label_y = ttk.Label(frame_1, text="y")
label_x.place(relx=0.4, rely=0.2, anchor="w", relwidth=0.1)
label_y.place(relx=0.6, rely=0.2, anchor="center", relwidth=0.1)


# –°—Ç—Ä–æ–∫–∏ —Å –≤–≤–æ–¥–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ê, –í, –°
row_a = Row(user_input="A", y_position=0.3, var_x=a_x_var, var_y=a_y_var)
row_b = Row(user_input="B", y_position=0.4, var_x=b_x_var, var_y=b_y_var)
row_c = Row(user_input="C", y_position=0.5, var_x=c_x_var, var_y=c_y_var)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
btn = ttk.Button(frame_1, text="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å", command=btn_pressed)
btn.place(relx=0.7, rely=0.5, anchor="center")

# –°–æ–∑–¥–∞—ë–º frame, —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ D –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
frame_2 = ttk.Frame(frame_1, width=50, height=50)
label_d = ttk.Label(frame_2, text="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ D:")
label_d_points = ttk.Label(frame_2, text="0.0", textvariable=d_text_var)

frame_2.place(relx=0.5, rely=0.6, anchor="center")
label_d.pack(side="left", padx=(0, 5))
label_d_points.pack()

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
window.mainloop()


'''
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨úüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨õüü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õ‚¨õüü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨õüü®üü®üü®üü®üüßüüß‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õüüßüüßüüßüüßüüß‚¨õ‚¨õüü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ
‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
'''


import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt


# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .0
def zero_after_point(x):
    if x == int(x):
        return int(x)
    else:
        return x


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –æ–∫–Ω–∞
window = tk.Tk()
window.minsize(450, 350)
window.maxsize(600, 550)
window.title("–ó–∞–¥–∞–Ω–∏–µ 3")
frame_1 = ttk.Frame(window)
frame_1.pack(expand=True, fill="both")


# –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
point_x_str = tk.StringVar()
point_y_str = tk.StringVar()
quadrant_str = tk.StringVar()


def btn_pressed():

    try:
        label_down.configure(text="–ù–∞—Ö–æ–¥–∏—Ç—Å—è:")
        label_quadrant.pack()
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏
        point_x = float(point_x_str.get())
        point_y = float(point_y_str.get())

        x = zero_after_point(point_x)
        y = zero_after_point(point_y)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –≤ –∫–∞–∫–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ—á–∫–∞ ()
        if x > 0 and y > 0:
            dot = "–≤ 1 —á–µ—Ç–≤–µ—Ä—Ç–∏"
        elif x > 0 and y < 0:
            dot = "–≤ 4 —á–µ—Ç–≤–µ—Ä—Ç–∏"
        elif (x > 0 and y == 0) or (x < 0 and y == 0):
            dot = "–Ω–∞ –æ—Å–∏ X"
        elif x == 0 and y == 0:
            dot = "–≤ –Ω–∞—á–∞–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"
        elif (x == 0 and y < 0) or (x == 0 and y > 0):
            dot = "–Ω–∞ –æ—Å–∏ Y"
        elif x < 0 and y > 0:
            dot = "–≤–æ 2 —á–µ—Ç–≤–µ—Ä—Ç–∏"
        else:
            dot = "–≤ 3 —á–µ—Ç–≤–µ—Ä—Ç–∏"

        quadrant_str.set(dot)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ —ç—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∏
        plt.close(fig="all")
        # –°–æ–∑–¥–∞—ë–º —Ñ–∏–≥—É—Ä—É
        plt.figure(num="dot", dpi=100)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.title(label="–¢–æ—á–∫–∞", fontsize=14)
        plt.xlabel(xlabel="–û—Å—å X", loc="center")
        plt.ylabel(ylabel="–û—Å—å Y", loc="center")

        # –í—ã–≤–æ–¥–∏–º
        plt.plot(x, y, "ro")
        plt.show()

    except ValueError:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á—Ç–æ-—Ç–æ –≤–º–µ—Å—Ç–æ —á–∏—Å–µ–ª
        label_down.configure(text="–í–º–µ—Å—Ç–æ —á–∏—Å–µ–ª –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.")
        label_quadrant.pack_forget()


# –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —Å—Ç—Ä–æ–æ–∫–æ–π –≤–≤–æ–¥–∞
class Column:
    def __init__(self, parent, column_text, var, x, y):
        self.frame = ttk.Frame(parent)
        self.label = ttk.Label(self.frame, text=column_text)
        self.entry = ttk.Entry(self.frame, textvariable=var, width=8)
        self.position(x, y)
        
    def position(self, x, y):
        self.frame.place(relx=x, rely=y, anchor="center")
        self.label.pack()
        self.entry.pack()

# –ù–∞–¥–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É
label_task = ttk.Label(frame_1, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏:")
label_task.place(relx=0.5, rely=0.1, anchor="center")

# –ö–æ–ª–æ–Ω–∫–∞ 1
column_1 = Column(frame_1, column_text="X", var=point_x_str, x=0.4, y=0.3)

# –ö–æ–ª–æ–Ω–∫–∞ 2
column_2 = Column(frame_1, column_text="Y", var=point_y_str, x=0.6, y=0.3)



# –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
btn = ttk.Button(frame_1, text="–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏", command=btn_pressed)
btn.place(relx=0.5, rely=0.5, anchor="center")

# –°–æ–∑–¥–∞—ë–º frame, —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–∞–∫–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ—á–∫–∞
frame_2 = ttk.Frame(frame_1, width=50, height=50)
label_down = ttk.Label(frame_2, text="–ù–∞—Ö–æ–¥–∏—Ç—Å—è:")
label_quadrant = ttk.Label(frame_2, text="0", textvariable=quadrant_str)

frame_2.place(relx=0.5, rely=0.6, anchor="center")
label_down.pack()
label_quadrant.pack()

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
window.mainloop()

'''
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨úüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨õüü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õ‚¨õüü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨õüü®üü®üü®üü®üüßüüß‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õüüßüüßüüßüüßüüß‚¨õ‚¨õüü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ
‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
'''

import tkinter as tk
from tkinter import ttk


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –æ–∫–Ω–∞
window = tk.Tk()
window.minsize(500, 400)
window.title("–ó–∞–¥–∞–Ω–∏–µ 4")
frame_1 = ttk.Frame(window)
frame_1.pack(expand=True, fill="both")


user_inp = tk.StringVar()

def btn_pressed():
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    str_var = user_inp.get()
    # –ì–æ—Ç–æ–≤–∏–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    new_str = ""
    for i in str_var:
        # –ú–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã
        if i.isupper():
            new_str += i.lower()
        else:
            new_str += i.upper()
    # –í—ã–≤–æ–¥–∏–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    new_str_label.configure(text=new_str)




# –ù–∞–¥–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É
label_task = ttk.Label(frame_1, text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –≤ –≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç")
label_task.place(relx=0.5, rely=0.1, anchor="center")

# –û—Ç–¥–µ–ª —Å label –∏ —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
frame_a = ttk.Frame(frame_1)
frame_a.place(relx=0.5, rely=0.2, anchor="center")
a_label = ttk.Label(frame_a, text="–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É:")
a_inp = ttk.Entry(frame_a, textvariable=user_inp)
a_label.pack()
a_inp.pack()

# –û—Ç–¥–µ–ª —Å –∫–Ω–æ–ø–∫–æ–π –∏ –∫–æ–Ω–µ—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
frame_b = ttk.Frame(frame_1)
frame_b.place(relx=0.5, rely=0.4, anchor="center")
btn = ttk.Button(frame_b, text="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", command=btn_pressed)
new_str_label = ttk.Label(frame_b, text="–ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞")
btn.pack()
new_str_label.pack()


# –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
window.mainloop()

'''
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨úüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨õüü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õ‚¨õüü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨õüü®üü®üü®üü®üüßüüß‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õüüßüüßüüßüüßüüß‚¨õ‚¨õüü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ
‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
'''

import tkinter as tk
from tkinter import ttk
import random as r
import string as s


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –æ–∫–Ω–∞
window = tk.Tk()
window.minsize(500, 400)
window.title("–ó–∞–¥–∞–Ω–∏–µ 5")
frame_1 = ttk.Frame(window)
frame_1.pack(expand=True, fill="both")


# –ì–æ—Ç–æ–≤—ã–π –ª–∏—Å—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
rus_list = ["–∞","–±","–≤","–≥","–¥","–µ","—ë","–∂","–∑","–∏","–π","–∫","–ª","–º","–Ω","–æ","–ø","—Ä","—Å","—Ç","—É","—Ñ","—Ö","—Ü","—á","—à","—â","—ä","—ã","—å","—ç","—é","—è","–ê","–ë","–í","–≥","–î","–ï","–Å","–ñ","–ó","–ò","–ô","–ö","–õ","–ú","–ù","–û","–ü","–†","–°","–¢","–£","–§","–•","–¶","–ß","–®","–©","–™","–´","–¨","–≠","–Æ","–Ø"]


def random_power(choice):
    if choice == 1:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±—É–∫–≤—É –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
        char = r.choice(s.ascii_lowercase)
        return char
    elif choice == 2:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±—É–∫–≤—É –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
        char = r.choice(s.ascii_uppercase)
        return char
    elif choice == 3:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±—É–∫–≤—É –ª—é–±–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
        char = r.choice(rus_list)
        return char
    elif choice == 4:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 10 (–≤—ã–±—Ä–∞–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∞–ª–µ–Ω—å–∫–æ–º –æ–∫–Ω–µ)
        char = r.randint(1,10)
        return char
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏, –Ω–µ –≤–æ—à–µ–¥—à–∏–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        char = r.choice(s.punctuation)
        return char


def create_array():
    # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏
    array = [
        [],
        [],
        [],
        [],
        [],
    ]

    # –ù–∞–ø–æ–ª–Ω—è–µ–º –ª–∏—Å—Ç —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏/—á–∏—Å–ª–∞–º–∏/–±—É–∫–≤–∞–º–∏
    for row in array:
        for item in range(5):
            # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Å–∏–º–≤–æ–ª
            random_choice = r.randint(1, 5)
            # –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –ª–∏—Å—Ç
            row.append(random_power(random_choice))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é        
    label_array.configure(text=f"{array[0]}\n{array[1]}\n{array[2]}\n{array[3]}\n{array[4]}")

    return change_array(array)


def change_array(array):
    # –°–æ–∑–¥–∞—ë–º —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
    main_diagonal = 0
    sub_diagonal = 4

    # –û–±–Ω—É–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ —É —Å—á—ë—Ç—á–∏–∫–æ–≤, –∏–∑–º–µ–Ω—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
    for outer in range(5):
        array[outer][main_diagonal] = 0
        array[outer][sub_diagonal] = 0
        main_diagonal += 1
        sub_diagonal -= 1

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    label_new_array.configure(text=f"{array[0]}\n{array[1]}\n{array[2]}\n{array[3]}\n{array[4]}")


# –ù–∞–¥–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É
label_task = ttk.Label(frame_1, text="–û–±–Ω—É–ª–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ –≥–ª–∞–≤–Ω—É—é –∏ –ø–æ–±–æ—á–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª–∏.")
label_task.place(relx=0.5, rely=0.1, anchor="center")

# –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
label_array = ttk.Label(frame_1, text='', wraplength=350, font="12")
label_array.place(relx=0.3, rely=0.3, anchor="center")

# –ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –æ–±–Ω—É–ª—ë–Ω–Ω—ã–º–∏ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º–∏
label_new_array = ttk.Label(frame_1, text='', wraplength=350, font="12")
label_new_array.place(relx=0.7, rely=0.3, anchor="center")

# –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
btn_create = ttk.Button(frame_1, text="–°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏ –æ–±–Ω—É–ª–∏—Ç—å –¥–∏–∞–≥–æ–Ω–∞–ª–∏", command=create_array)
btn_create.place(relx=0.5, rely=0.6, anchor="center")


# –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
window.mainloop()

'''
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨úüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨õüü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õ‚¨õüü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨õüü®üü®üü®üü®üüßüüß‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õüüßüüßüüßüüßüüß‚¨õ‚¨õüü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ
‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
'''

import tkinter as tk
from tkinter import ttk


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –æ–∫–Ω–∞
window = tk.Tk()
window.minsize(500, 400)
window.title("–ó–∞–¥–∞–Ω–∏–µ 6")
frame_1 = ttk.Frame(window)
frame_1.pack(expand=True, fill="both")

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_inp = tk.StringVar()

# –ó–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–ª–∞—Å–Ω—ã—Ö –≤ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö
vowels = ["–∞", "–µ", "—ë", "–∏", "–æ", "—É", "—ã", "—ç", "—é", "—è", "a", "e", "i", "o", "u"]

# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
def btn_pressed():
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞
    str_var = user_inp.get()
    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å—ë –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–≤—Å–µ –±—É–∫–≤—ã –º–∞–ª–µ–Ω—å–∫–∏–µ)
    str_var = str_var.lower()
    # –°–æ–∑–¥–∞—ë–º —Å—á—ë—Ç—á–∏–∫ –±—É–∫–≤ –∏ —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º –≥–æ—Ç–æ–≤–æ–º –ª–∏—Å—Ç–µ
    vowels_cnt = 0
    for i in str_var:
        if i in vowels:
            vowels_cnt += 1
    
    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–ª—É—á–∏–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤
    cnt_vowels.configure(text=f"{vowels_cnt}")
    
        
# –ù–∞–¥–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É
label_task = ttk.Label(frame_1, text="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å—Å–Ω—ã—Ö –±—É–∫–≤")
label_task.place(relx=0.5, rely=0.1, anchor="center")

# –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç—Ä–æ–∫—É –∏ –≤–≤–æ–¥, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–∞–∫—É–µ–º –≤ frame_a
frame_a = ttk.Frame(frame_1)
frame_a.place(relx=0.5, rely=0.2, anchor="center")
a_label = ttk.Label(frame_a, text="–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É:")
a_inp = ttk.Entry(frame_a, textvariable=user_inp)
a_label.pack()
a_inp.pack()

# –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω–æ –∫–Ω–æ–ø–∫—É, –∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–∞–∫—É–µ–º –≤ frame_b
frame_b = ttk.Frame(frame_1)
frame_b.place(relx=0.5, rely=0.4, anchor="center")
btn = ttk.Button(frame_b, text="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö", command=btn_pressed)
new_str_label = ttk.Label(frame_b, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏:")
# –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö
cnt_vowels = ttk.Label(frame_b, text="")
btn.pack()
new_str_label.pack()
cnt_vowels.pack()

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
window.mainloop()

'''
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨úüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨õüü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õ‚¨õüü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨õüü®üü®üü®üü®üüßüüß‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õüüßüüßüüßüüßüüß‚¨õ‚¨õüü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ
‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
'''

import tkinter as tk
from tkinter import ttk
import numpy as np
import matplotlib.pyplot as plt



# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –æ–∫–Ω–∞
window = tk.Tk()
window.minsize(500, 400)
window.title("–ó–∞–¥–∞–Ω–∏–µ 7")
frame_1 = ttk.Frame(window)
frame_1.pack(expand=True, fill="both")



def btn_pressed():
    
    # –ó–∞–ø–∏—Å–∞–ª–∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    def eq_1(x):
        return x**2 - 2*x + 3
    
    def eq_2(x):
        return -x + 7
        
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (–≤—Ä—É—á–Ω—É—é –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π)
    x_min, x_max = -5, 5
    y_min, y_max = -10, 10
    
    # –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤—ã —Ö –∏ —É, –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
    x_points = np.arange(x_min, x_max + 1)
    y_points = np.arange(y_min, y_max + 1)
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ü–µ–ª—ã—Ö —Ç–æ—á–µ–∫
    int_points = []
    for x in x_points:
        for y in y_points:
            if y > eq_1(x) and y < eq_2(x):
                int_points.append((x, y))
    
    # –î–µ–ª–∞–µ–º –∏–∑ –ª–∏—Å—Ç–∞ –º–∞—Å—Å–∏–≤
    int_points = np.array(int_points)
    
    
    # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å 
    cnt = len(int_points)
    row_3.inequation.configure(text=f"{cnt}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(num="my_figure", dpi=100)
    plt.grid(visible=True, linewidth=1)

    # –°—Ç—Ä–æ–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    x = np.linspace(x_min, x_max)
    y1 = eq_1(x)
    y2 = eq_2(x)
    plt.plot(x, y1)
    plt.plot(x, y2)
    
    # –°—Ç–∞–≤–∏–º —Ç–æ—á–∫–∏ –Ω–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞—Ö
    if int_points.size > 0:
        plt.scatter(int_points[:, 0], int_points[:, 1], color='red', label='–¶–µ–ª—ã–µ —Ç–æ—á–∫–∏')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É
    plt.show()
    
    


# –ö–ª–∞—Å—Å, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –¥–≤—É—Ö label. –û–¥–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç –∫–∞–∫–æ–µ –ø–æ —Å—á—ë—Ç—É —ç—Ç–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ, –≤—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∞–º–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
class Row:
    def __init__(self, parent, user_input, inequation):
        self.label = ttk.Label(parent, text=user_input)
        self.inequation = ttk.Label(parent, text=inequation)
        self.label.pack(side="left", padx=(0, 5))
        self.inequation.pack()


# –ù–∞–¥–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É
label_task = ttk.Label(frame_1, text="‚Ññ 70:")
label_task.place(relx=0.5, rely=0.1, anchor="center")

# –ü–µ—Ä–≤–æ–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
frame_a = ttk.Frame(frame_1)
frame_a.place(relx=0.5, rely=0.2, anchor="center")
row_1 = Row(parent=frame_a, user_input="–ü–µ—Ä–≤–æ–µ:", inequation="y > x^2 - 2*x + 3")

# –í—Ç–æ—Ä–æ–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
frame_b = ttk.Frame(frame_1)
frame_b.place(relx=0.5, rely=0.3, anchor="center")
row_2 = Row(parent=frame_b, user_input="–í—Ç–æ—Ä–æ–µ:", inequation="y < -x + 7")

# –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
btn = ttk.Button(frame_1, text="–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏", command=btn_pressed)
btn.place(relx=0.5, rely=0.4, anchor="center")

# Label —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–µ–ª—ã—Ö —Ç–æ—á–µ–∫
frame_cnt = ttk.Frame(frame_1)
frame_cnt.place(relx=0.5, rely=0.5, anchor="center")
row_3 = Row(parent=frame_cnt, user_input="–í—Å–µ–≥–æ —Ç–æ—á–µ–∫:", inequation=0)


# –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
window.mainloop()

'''
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨úüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨õüü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õ‚¨õüü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨õüü®üü®üü®üü®üüßüüß‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õüüßüüßüüßüüßüüß‚¨õ‚¨õüü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ
‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
'''

import tkinter as tk
from tkinter import ttk
import re

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –æ–∫–Ω–∞
window = tk.Tk()
window.minsize(500, 400)
window.title("–ó–∞–¥–∞–Ω–∏–µ 8")
tabs = ttk.Notebook(window)
tabs.pack(expand=True, fill="both")


class Excercise:
    def __init__(self, name, task_text, btn_command):
        self.frame = ttk.Frame(tabs)
        self.frame.pack(expand=True, fill="both")
        tabs.add(self.frame, text=name)

        # –°–æ–∑–¥–∞—ë–º label —Å –∑–∞–¥–∞–Ω–∏–µ–º
        self.task_label = ttk.Label(self.frame, text=task_text, wraplength=350)

        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        self.text_input = tk.Text(self.frame)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.btn = ttk.Button(self.frame, text="–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", command=btn_command)

        # label –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.output_label = ttk.Label(self.frame, text="", wraplength=350, font="12")

        self.position()

    # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –≤—Å—ë –ø–æ –º–µ—Å—Ç–∞–º
    def position(self):

        self.task_label.place(relx=0.5, rely=0.1, anchor="center")
        self.text_input.place(
            relx=0.5, rely=0.4, relheight=0.3, relwidth=0.5, anchor="center"
        )
        self.btn.place(relx=0.5, rely=0.6, anchor="center")
        self.output_label.place(relx=0.5, rely=0.8, anchor="center")



# –ó–∞–¥–∞–Ω–∏–µ 8_1
def punctuation():
    inp = exercise_8_1.text_input.get(1.0, "end-1c")
    # –ù–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª –≤–º–µ—Å—Ç–æ –∑–Ω–∞–∫–æ–≤ "_", –Ω–æ —è –∏ –Ω–µ –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞ –∏ –Ω—É–∂–Ω–æ
    new_str = re.sub(r'[^\w\s]|_', '', inp)
    exercise_8_1.output_label.configure(text=new_str)

exercise_8_1 = Excercise(
    name="8_1",
    task_text='–° –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —É–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
    btn_command=punctuation,
)


# –ó–∞–¥–∞–Ω–∏–µ 8_2
def tandem():
    inp = exercise_8_2.text_input.get(1.0, "end-1c")
    pattern = r'\b(\w+)\1\b'
    def has_tandem_repetition(line): 
        return bool(pattern.search(line))
    new_str = [line for line in inp.split('\n') if has_tandem_repetition(line)]
    exercise_8_2.output_label.configure(text=new_str)

exercise_8_2 = Excercise(
    name="8_2",
    task_text='–í—ã–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ª–æ–≤–æ, —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –¥–≤—É—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π (—Ç–∞–Ω–¥–µ–º–Ω—ã–π –ø–æ–≤—Ç–æ—Ä).',
    btn_command=tandem,
)

# –ó–∞–¥–∞–Ω–∏–µ 8_3
def print_cat_cat():
    inp = exercise_8_3.text_input.get(1.0, "end-1c")
    new_str = "\n".join(re.findall(r'(cat.*cat)', inp, re.MULTILINE)) 
    exercise_8_3.output_label.configure(text=new_str)

exercise_8_3 = Excercise(
    name="8_3",
    task_text='–í—ã–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "cat" –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Ä–∞–∑–∞.',
    btn_command=print_cat_cat,
)


# –ó–∞–¥–∞–Ω–∏–µ 8_4
def print_cat():
    inp = exercise_8_4.text_input.get(1.0, "end-1c")
    new_str = "\n".join(re.findall(r'(^.*\bcat\b.*$)', inp, re.MULTILINE)) 
    exercise_8_4.output_label.configure(text=new_str)

exercise_8_4 = Excercise(
    name="8_4",
    task_text='–í—ã–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "cat" –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–ª–æ–≤–∞.',
    btn_command=print_cat,
)

# –ó–∞–¥–∞–Ω–∏–µ 8_5
def print_backslash():
    inp = exercise_8_5.text_input.get(1.0, "end-1c")
    new_str = "\n".join(re.findall(r'.*\\.*', inp, re.MULTILINE)) 
    exercise_8_5.output_label.configure(text=new_str)


exercise_8_5 = Excercise(
    name="8_5",
    task_text='–í—ã–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à "\\".',
    btn_command=print_backslash,
)

# –ó–∞–¥–∞–Ω–∏–µ 8_6
def change_to_computer():
    inp = exercise_8_6.text_input.get(1.0, "end-1c")
    new_str = re.sub(r'human', 'computer', inp)
    exercise_8_6.output_label.configure(text=new_str)

exercise_8_6 = Excercise(
    name="8_6",
    task_text="–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ \"human\" –Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫—É \"computer\" –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.",
    btn_command=change_to_computer,
)


# –ó–∞–¥–∞–Ω–∏–µ 8_7
def change_to_argh():
    inp = exercise_8_7.text_input.get(1.0, "end-1c")
    new_str = re.sub(r'\b[aA]+\b', 'argh', inp, count=1)
    exercise_8_7.output_label.configure(text=new_str)

exercise_8_7 = Excercise(
    name="8_7",
    task_text="–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–º–µ–Ω–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞, —Å–æ—Å—Ç–æ—è—â–µ–≥–æ —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ \"a\" (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω), –Ω–∞ —Å–ª–æ–≤–æ \"argh\".",
    btn_command=change_to_argh,
)

# –ó–∞–¥–∞–Ω–∏–µ 8_8
def swap_two_first_letters():
    inp = exercise_8_8.text_input.get(1.0, "end-1c")
    
    def swap(found):
        word = found.group()
        return word[1] + word[0] + word[2:]
    
    new_str = re.sub(r"\w[a-zA-Z0-9–∞-—è–ê-–Ø]{1,}", swap, inp)
    exercise_8_8.output_label.configure(text=new_str)

exercise_8_8 = Excercise(
    name="8_8",
    task_text="–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–º–µ–Ω—è–π—Ç–µ –º–µ—Å—Ç–∞–º–∏ –¥–≤–µ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞, —Å–æ—Å—Ç–æ—è—â–µ–≥–æ —Ö–æ—Ç—è –±—ã –∏–∑ –¥–≤—É—Ö –±—É–∫–≤.",
    btn_command=swap_two_first_letters,
)

# –ó–∞–¥–∞–Ω–∏–µ 8_9
def several_letters_to_one():
    inp = exercise_8_9.text_input.get(1.0, "end-1c")
    new_str = re.sub(r"([a-zA-Z0-9–∞-—è–ê-–Ø])\1{1,}", r"\1", inp)
    exercise_8_9.output_label.configure(text=new_str)

exercise_8_9 = Excercise(
    name="8_9",
    task_text="–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±—É–∫–≤ –Ω–∞ –æ–¥–Ω—É –±—É–∫–≤—É.",
    btn_command=several_letters_to_one,
)

# –ó–∞–¥–∞–Ω–∏–µ 8_10
def email_work():
    inp = exercise_8_10.text_input.get(1.0, "end-1c")
    pattern = r'(\w+)@(\w+)\.(\w+)'
    new_str = re.findall(pattern, inp)
    exercise_8_10.output_label.configure(text=new_str)

exercise_8_10 = Excercise(
    name="8_10",
    task_text="–ò–∑–≤–ª–µ–∫–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º—è –¥–æ–º–µ–Ω–∞ –∏ —Å—É—Ñ—Ñ–∏–∫—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤",
    btn_command=email_work,
)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
window.mainloop()


'''
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨úüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨õüü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õ‚¨õüü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨õüü®üü®üü®üü®üüßüüß‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õüüßüüßüüßüüßüüß‚¨õ‚¨õüü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ
‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
'''

import tkinter as tk
from tkinter import ttk
import re

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –æ–∫–Ω–∞
window = tk.Tk()
window.minsize(500, 400)
window.title("–ó–∞–¥–∞–Ω–∏–µ 9")
frame_1 = ttk.Frame(window)
frame_1.pack(expand=True, fill="both")


# –°–æ–∑–¥–∞—ë–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º –≤—ã—á–∏—Å–ª—è—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
name_pattern = r'[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.'
email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
phone_pattern = r'\+7\(\d{3}\)\d{3}-\d{2}-\d{2}'

def btn_pressed():
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = str_var.get()
    # –ò—â–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    fio = re.search(name_pattern, text).group()
    emails = re.findall(email_pattern, text)
    phones = re.findall(phone_pattern, text)
    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç, –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_label.configure(text=f'–§–ò–û: {fio} \nEmail: {emails} \n–¢–µ–ª–µ—Ñ–æ–Ω: {phones} ')


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
str_var = tk.StringVar()
# –ù–∞–¥–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É
task_label = ttk.Label(frame_1, text="–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ email:")
task_label.place(relx=0.5, rely=0.1, anchor="center")

# –°—Ç—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
enter = ttk.Entry(frame_1, textvariable=str_var)
enter.place(relx=0.5, rely=0.3, anchor="center")

# –ö–Ω–æ–ø–∫–∞, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –º–µ—Ö–∞–Ω–∏–∑–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
btn = ttk.Button(frame_1, text="–ò–∑–≤–ª–µ—á—å", command=btn_pressed)
btn.place(relx=0.5, rely=0.4, anchor="center")

# Label, –∫—É–¥–∞ –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç
result_label = ttk.Label(frame_1, text="–§–ò–û: - \nEmail: - \n–¢–µ–ª–µ—Ñ–æ–Ω: - ")
result_label.place(relx=0.5, rely=0.5, anchor="center")



# –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
window.mainloop()


'''—Å—Ç—É–¥–µ–Ω—Ç –ü–µ—Ç—Ä–æ–≤ –í.–ü. - –≥—Ä—É–ø–ø–∞ –£–ú–†11 —Ç–µ–ª. +7(918)240-04-40
Email: petrov@mail.ru –¥–æ–ø. —Ç–µ–ª +7(926)718-33-22'''